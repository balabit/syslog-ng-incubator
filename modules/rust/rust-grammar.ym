/*
 * Copyright (c) 2025 BalaBit
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 *
 * As an additional exemption you are allowed to compile & link against the
 * OpenSSL libraries as published by the OpenSSL project. See the file
 * COPYING for details.
 *
 */

%code top {
#include "rust-parser.h"

}


%code {

#include "cfg-parser.h"
#include "parser.h"
#include "rust-grammar.h"
#include "syslog-names.h"
#include "messages.h"
#include "plugin.h"
#include "cfg-grammar.h"

#include <string.h>

}

%name-prefix "rust_"

/* this parameter is needed in order to instruct bison to use a complete
 * argument list for yylex/yyerror */

%lex-param {CfgLexer *lexer}
%parse-param {CfgLexer *lexer}
%parse-param {LogParser **instance}
%parse-param {gpointer arg}

/* INCLUDE_DECLS */

%token KW_OPTION

%type <ptr> rust
%type <ptr> rust_parser
%type <ptr> rust_parser_params
%%

start
  : rust
    {
      *instance = $1;
      if (yychar != YYEMPTY)
        cfg_lexer_unput_token(lexer, &yylval);
      YYACCEPT;
    }
  ;

rust
  : LL_CONTEXT_PARSER rust_parser { $$ = $2; }
  ;

rust_parser
  : LL_IDENTIFIER '(' rust_parser_params ')' { $$ = *instance; }
  ;

rust_parser_params
  : {
      *instance = rust_parser_new(configuration);

      if (!*instance)
       {
         msg_error("Cannot create the Rust parser, aborting",
                   NULL);
         YYERROR;
       }
    }
    rust_parser_options
  ;

rust_parser_options
  : rust_parser_option rust_parser_options
  |
  ;

rust_parser_option
  : KW_OPTION '(' string string ')'
    {
      rust_parser_set_option(*instance, $3, $4);
      free($3);
      free($4);
    }
    ;

/* INCLUDE_RULES */

%%

